#!/usr/bin/perl -w

# Description: this is a server that provides a pool of connections to a PBX.
#
# Author: Benjamin Roy <benroy@uw.edu>
#
# Copyright: 2011
# License: Apache 2.0

package pbxd;

use strict;
use Data::Dumper;
use base qw(Net::Server::PreFork); # any personality will do
use XML::Simple;
use Getopt::Long;
use DEFINITY_ossi;

my $node;  # the DEFINITY_ossi instance

GetOptions(
    "node=s"  => \my $pbxd_nodename,
    "debug"   => \my $DEBUG
);
unless (defined $pbxd_nodename) {
    die "\nUsage: $0 --node <n1|n2|n3|ondemand> [--debug]\n\n";
}

my $config_file = "./pbxd-". $pbxd_nodename .".conf";

pbxd->run({ conf_file => $config_file });


### over-ridden subs below

sub child_init_hook() {
    print "-- child init hook -- \n" if $DEBUG;
    unless ( $pbxd_nodename eq 'ondemand' ) {
        $node = new DEFINITY_ossi($pbxd_nodename, $DEBUG);
        unless( $node && $node->status_connection() ) {
            die("ERROR: Login failed for ". $node->get_node_name() );
        }
    }
}

sub child_finish_hook() {
    print "-- child finish hook -- \n" if $DEBUG;
    $node->do_logoff() if defined $node;
}

sub process_request {
    my $self = shift;
    my $result;
    my $timeout_message;

    eval {
        my $xml = "";

        local $SIG{'ALRM'} = sub {
            $result->{error}->{text} = $timeout_message;
            print XMLout($result, ContentKey => 'text', RootName => 'command');
            die;
        };

        alarm 30; # a request must be entered within 30 seconds
        $timeout_message = "Timeout waiting for client input.";

        while (<STDIN>) {
            s/\r?\n$//;
            my $line = $_;
            last if ( $line =~ m/END OF REQUEST/ );
            $xml .= "$line\n";
        }

        alarm 300; # now give the PBX 5 minutes to complete the command and return the results
        $timeout_message = "Timeout waiting for PBX results.";

        print XMLout( process_pbx_command($xml), ContentKey => 'text', RootName => 'command' );

        alarm 0; # clear the timeout
    };

    # now that we're back to waiting for another command, we'll logout if we don't get another request soon
    if ($pbxd_nodename eq 'ondemand') {
        local $SIG{'ALRM'} = sub {
            $node->do_logoff() if defined $node;
            $node = undef;
        };
        alarm 30;
    }

    return;
}


sub process_pbx_command() {
    my ($xml) = @_;
    my $request = XMLin( $xml, ForceArray => [ 'field' ] );
    my $result;

    $result->{cmd} = $request->{cmd};
    $result->{cmdType} = $request->{cmdType};

    if ( not defined $request->{pbxName} ) {
        # the client must specify the PBX name in the XML request
        $result->{error}->{text} = "You must specify a pbxName.";
        return $result;
    }
    elsif ( $pbxd_nodename ne 'ondemand' && $pbxd_nodename ne $request->{pbxName}) {
        # if this is not an ondemand server the client request must match the PBX this server is connected to.
        $result->{error}->{text} = "This server is connected to $pbxd_nodename but you requested ". $request->{pbxName};
        return $result;
    }
    elsif ( $pbxd_nodename eq 'ondemand' ) {
        # if this is the ondemand server then we need to make sure we setup the connection to the correct PBX
        if ( defined $node ) {
            # already connected to a PBX so don't need reconnect if it's the same one this client is requesting
            if ( $node->get_node_name() ne $request->{pbxName}) {
                # not the requested PBX so disconnect then reconnect to the correct PBX
                $node->do_logoff();
                $node = undef;
                $node = new DEFINITY_ossi($request->{pbxName}, $DEBUG);
            }
        }
        else {
            # there's no connection to a PBX already, so get connected
            $node = new DEFINITY_ossi($request->{pbxName}, $DEBUG);
        }

        # now verify our connection state
        unless( $node && $node->status_connection() ) {
            die("ERROR: Login failed for ". $node->get_node_name() );
        }
    }
    $result->{pbxName} = $request->{pbxName};

    if ( $request->{cmdType} eq 'ossi' ) {
        my %fields = ();
        foreach my $request_field ( @{$request->{field}} ){
            my $fid = $request_field->{fid};
            my $val = "";
            $val = $request_field->{content} if ($request_field->{content});
            $fields{$fid} = $val;
        }

        # send the command and fields to the PBX
        $node->pbx_command( $request->{cmd}, %fields );
        if ( $node->last_command_succeeded() ) {
            my @ossi_objects = $node->get_ossi_objects();
            for (my $i=0; $i < scalar @ossi_objects; $i++) {
                my $ossi_object = $ossi_objects[$i];
                $result->{"ossi_object"}[$i]->{i} = $i+1;
                my $f = 0;
                for my $field ( sort keys %$ossi_object ) {
                    my $value = $ossi_object->{$field};
                    $result->{"ossi_object"}[$i]->{field}[$f]->{fid} = $field;
                    unless( defined $value ) { $value = '' };
                    $result->{"ossi_object"}[$i]->{field}[$f]->{text} = $value;
                    $f++;
                }
            }
        }
        else { # error message from PBX
            $result->{error}->{text} = $node->get_last_error_message();
        }
    }
    elsif ( $request->{cmdType} eq 'vt220' ) {
        if ( $node->pbx_vt220_command( $request->{cmd} ) ) {
            my @screens = $node->get_vt220_screens();
            for (my $s=0; $s < scalar @screens; $s++) {
                $result->{screen}[$s]->{page} = $s+1;
                $result->{screen}[$s]->{text} = $screens[$s];
            }
        }
        else { # error message from PBX
            $result->{error}->{text} = $node->get_last_error_message();
        }
    }
    else {
        $result->{error}->{text} = "unknown cmdType";
    }

    return $result;
}

1;
